//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TravelAPPDataLayer.EntityObjects
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RentalHolidayEntities : DbContext
    {
        public RentalHolidayEntities()
            : base("name=RentalHolidayEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<amenitiesTable> amenitiesTables { get; set; }
        public virtual DbSet<amenityFee> amenityFees { get; set; }
        public virtual DbSet<attractionsTable> attractionsTables { get; set; }
        public virtual DbSet<billingsTable> billingsTables { get; set; }
        public virtual DbSet<citiesTable> citiesTables { get; set; }
        public virtual DbSet<contactsTable> contactsTables { get; set; }
        public virtual DbSet<countriesTable> countriesTables { get; set; }
        public virtual DbSet<DomainName> DomainNames { get; set; }
        public virtual DbSet<enquiryTable> enquiryTables { get; set; }
        public virtual DbSet<facilitiesData> facilitiesDatas { get; set; }
        public virtual DbSet<facilitiesItemsData> facilitiesItemsDatas { get; set; }
        public virtual DbSet<listingsImagesTable> listingsImagesTables { get; set; }
        public virtual DbSet<ownersTable> ownersTables { get; set; }
        public virtual DbSet<policiesTable> policiesTables { get; set; }
        public virtual DbSet<promotionsTable> promotionsTables { get; set; }
        public virtual DbSet<ratesDataTable> ratesDataTables { get; set; }
        public virtual DbSet<ratesTable> ratesTables { get; set; }
        public virtual DbSet<regionsTable> regionsTables { get; set; }
        public virtual DbSet<reviewsTable> reviewsTables { get; set; }
        public virtual DbSet<roomsTable> roomsTables { get; set; }
        public virtual DbSet<statesTable> statesTables { get; set; }
        public virtual DbSet<tbl_continents> tbl_continents { get; set; }
        public virtual DbSet<travelersTable> travelersTables { get; set; }
        public virtual DbSet<userdetail> userdetails { get; set; }
        public virtual DbSet<usersTable> usersTables { get; set; }
        public virtual DbSet<availabilityTable> availabilityTables { get; set; }
        public virtual DbSet<BlogComment> BlogComments { get; set; }
        public virtual DbSet<listingsTable> listingsTables { get; set; }
        public virtual DbSet<PageDetail> PageDetails { get; set; }
        public virtual DbSet<PostBlog> PostBlogs { get; set; }
    
        public virtual int adddomain(string domainname)
        {
            var domainnameParameter = domainname != null ?
                new ObjectParameter("domainname", domainname) :
                new ObjectParameter("domainname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("adddomain", domainnameParameter);
        }
    
        public virtual int addPage(Nullable<int> domainid, string pagename, string title, string keyword, string description)
        {
            var domainidParameter = domainid.HasValue ?
                new ObjectParameter("domainid", domainid) :
                new ObjectParameter("domainid", typeof(int));
    
            var pagenameParameter = pagename != null ?
                new ObjectParameter("pagename", pagename) :
                new ObjectParameter("pagename", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addPage", domainidParameter, pagenameParameter, titleParameter, keywordParameter, descriptionParameter);
        }
    
        public virtual int adduser(string loginid, string pwd, string roal, Nullable<int> status)
        {
            var loginidParameter = loginid != null ?
                new ObjectParameter("loginid", loginid) :
                new ObjectParameter("loginid", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            var roalParameter = roal != null ?
                new ObjectParameter("roal", roal) :
                new ObjectParameter("roal", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("adduser", loginidParameter, pwdParameter, roalParameter, statusParameter);
        }
    
        public virtual int DeletePageDetail(Nullable<int> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePageDetail", pidParameter);
        }
    
        public virtual ObjectResult<GetAllDomainName_Result> GetAllDomainName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDomainName_Result>("GetAllDomainName");
        }
    
        public virtual ObjectResult<GetAllpageDetailbyDid_Result> GetAllpageDetailbyDid(Nullable<int> did)
        {
            var didParameter = did.HasValue ?
                new ObjectParameter("did", did) :
                new ObjectParameter("did", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllpageDetailbyDid_Result>("GetAllpageDetailbyDid", didParameter);
        }
    
        public virtual ObjectResult<getalluserdetail_Result> getalluserdetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getalluserdetail_Result>("getalluserdetail");
        }
    
        public virtual ObjectResult<GetpageDetailbyPid_Result> GetpageDetailbyPid(Nullable<int> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetpageDetailbyPid_Result>("GetpageDetailbyPid", pidParameter);
        }
    
        public virtual int sp_Insert_AmenitiesTable(string amenities, string amenitiesSize, string maidService, Nullable<int> listingID, ObjectParameter id)
        {
            var amenitiesParameter = amenities != null ?
                new ObjectParameter("amenities", amenities) :
                new ObjectParameter("amenities", typeof(string));
    
            var amenitiesSizeParameter = amenitiesSize != null ?
                new ObjectParameter("amenitiesSize", amenitiesSize) :
                new ObjectParameter("amenitiesSize", typeof(string));
    
            var maidServiceParameter = maidService != null ?
                new ObjectParameter("maidService", maidService) :
                new ObjectParameter("maidService", typeof(string));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_AmenitiesTable", amenitiesParameter, amenitiesSizeParameter, maidServiceParameter, listingIDParameter, id);
        }
    
        public virtual int sp_Insert_AmenityFee(string items, string fees, string feeTypes, Nullable<int> listingID, ObjectParameter id)
        {
            var itemsParameter = items != null ?
                new ObjectParameter("items", items) :
                new ObjectParameter("items", typeof(string));
    
            var feesParameter = fees != null ?
                new ObjectParameter("fees", fees) :
                new ObjectParameter("fees", typeof(string));
    
            var feeTypesParameter = feeTypes != null ?
                new ObjectParameter("feeTypes", feeTypes) :
                new ObjectParameter("feeTypes", typeof(string));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_AmenityFee", itemsParameter, feesParameter, feeTypesParameter, listingIDParameter, id);
        }
    
        public virtual int sp_Insert_attractionsTable(string attractions, string distances, string distanceTypes, string description, Nullable<int> listingID, ObjectParameter id)
        {
            var attractionsParameter = attractions != null ?
                new ObjectParameter("attractions", attractions) :
                new ObjectParameter("attractions", typeof(string));
    
            var distancesParameter = distances != null ?
                new ObjectParameter("distances", distances) :
                new ObjectParameter("distances", typeof(string));
    
            var distanceTypesParameter = distanceTypes != null ?
                new ObjectParameter("distanceTypes", distanceTypes) :
                new ObjectParameter("distanceTypes", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_attractionsTable", attractionsParameter, distancesParameter, distanceTypesParameter, descriptionParameter, listingIDParameter, id);
        }
    
        public virtual int sp_Insert_billingsTable(Nullable<int> planID, Nullable<int> listingSize, string listingIDs, Nullable<int> months, Nullable<double> discount, Nullable<int> listingPrice, Nullable<double> price, Nullable<int> promotionCode, Nullable<int> ownerID, string paymentStatus, string country, string card_holder_name, string state, string city, string address, string address2, string postalCode, string phone, string email, Nullable<System.DateTime> date, string payment_reference_Id, string payment_type, ObjectParameter id)
        {
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("planID", planID) :
                new ObjectParameter("planID", typeof(int));
    
            var listingSizeParameter = listingSize.HasValue ?
                new ObjectParameter("listingSize", listingSize) :
                new ObjectParameter("listingSize", typeof(int));
    
            var listingIDsParameter = listingIDs != null ?
                new ObjectParameter("listingIDs", listingIDs) :
                new ObjectParameter("listingIDs", typeof(string));
    
            var monthsParameter = months.HasValue ?
                new ObjectParameter("months", months) :
                new ObjectParameter("months", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(double));
    
            var listingPriceParameter = listingPrice.HasValue ?
                new ObjectParameter("ListingPrice", listingPrice) :
                new ObjectParameter("ListingPrice", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(double));
    
            var promotionCodeParameter = promotionCode.HasValue ?
                new ObjectParameter("promotionCode", promotionCode) :
                new ObjectParameter("promotionCode", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("ownerID", ownerID) :
                new ObjectParameter("ownerID", typeof(int));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("paymentStatus", paymentStatus) :
                new ObjectParameter("paymentStatus", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var card_holder_nameParameter = card_holder_name != null ?
                new ObjectParameter("card_holder_name", card_holder_name) :
                new ObjectParameter("card_holder_name", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("postalCode", postalCode) :
                new ObjectParameter("postalCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var payment_reference_IdParameter = payment_reference_Id != null ?
                new ObjectParameter("Payment_reference_Id", payment_reference_Id) :
                new ObjectParameter("Payment_reference_Id", typeof(string));
    
            var payment_typeParameter = payment_type != null ?
                new ObjectParameter("Payment_type", payment_type) :
                new ObjectParameter("Payment_type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_billingsTable", planIDParameter, listingSizeParameter, listingIDsParameter, monthsParameter, discountParameter, listingPriceParameter, priceParameter, promotionCodeParameter, ownerIDParameter, paymentStatusParameter, countryParameter, card_holder_nameParameter, stateParameter, cityParameter, addressParameter, address2Parameter, postalCodeParameter, phoneParameter, emailParameter, dateParameter, payment_reference_IdParameter, payment_typeParameter, id);
        }
    
        public virtual int sp_Insert_ListingTable(string name, string continent, Nullable<int> country, Nullable<int> state, Nullable<int> region, Nullable<int> city, string address, string zip, string latitude, string longitude, Nullable<int> bedrooms, Nullable<decimal> bathrooms, string minStay, string propertyType, string locationType, Nullable<int> entrance, string timeZone, string description, string paymentStatus, Nullable<bool> status, Nullable<System.DateTime> date, Nullable<System.DateTime> dateUpdate, Nullable<int> addedBy, string roomDescription, string metaTitle, string metaKeyword, string metaDescription, string coastBeach, string golf, string specialInterest, string howReachThere, Nullable<bool> featured, Nullable<bool> topTen, Nullable<int> sleeps, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var continentParameter = continent != null ?
                new ObjectParameter("continent", continent) :
                new ObjectParameter("continent", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(int));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(int));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var bedroomsParameter = bedrooms.HasValue ?
                new ObjectParameter("bedrooms", bedrooms) :
                new ObjectParameter("bedrooms", typeof(int));
    
            var bathroomsParameter = bathrooms.HasValue ?
                new ObjectParameter("bathrooms", bathrooms) :
                new ObjectParameter("bathrooms", typeof(decimal));
    
            var minStayParameter = minStay != null ?
                new ObjectParameter("minStay", minStay) :
                new ObjectParameter("minStay", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("propertyType", propertyType) :
                new ObjectParameter("propertyType", typeof(string));
    
            var locationTypeParameter = locationType != null ?
                new ObjectParameter("locationType", locationType) :
                new ObjectParameter("locationType", typeof(string));
    
            var entranceParameter = entrance.HasValue ?
                new ObjectParameter("entrance", entrance) :
                new ObjectParameter("entrance", typeof(int));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("timeZone", timeZone) :
                new ObjectParameter("timeZone", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("paymentStatus", paymentStatus) :
                new ObjectParameter("paymentStatus", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var dateUpdateParameter = dateUpdate.HasValue ?
                new ObjectParameter("dateUpdate", dateUpdate) :
                new ObjectParameter("dateUpdate", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("addedBy", addedBy) :
                new ObjectParameter("addedBy", typeof(int));
    
            var roomDescriptionParameter = roomDescription != null ?
                new ObjectParameter("roomDescription", roomDescription) :
                new ObjectParameter("roomDescription", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("metaTitle", metaTitle) :
                new ObjectParameter("metaTitle", typeof(string));
    
            var metaKeywordParameter = metaKeyword != null ?
                new ObjectParameter("metaKeyword", metaKeyword) :
                new ObjectParameter("metaKeyword", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("metaDescription", metaDescription) :
                new ObjectParameter("metaDescription", typeof(string));
    
            var coastBeachParameter = coastBeach != null ?
                new ObjectParameter("coastBeach", coastBeach) :
                new ObjectParameter("coastBeach", typeof(string));
    
            var golfParameter = golf != null ?
                new ObjectParameter("golf", golf) :
                new ObjectParameter("golf", typeof(string));
    
            var specialInterestParameter = specialInterest != null ?
                new ObjectParameter("specialInterest", specialInterest) :
                new ObjectParameter("specialInterest", typeof(string));
    
            var howReachThereParameter = howReachThere != null ?
                new ObjectParameter("howReachThere", howReachThere) :
                new ObjectParameter("howReachThere", typeof(string));
    
            var featuredParameter = featured.HasValue ?
                new ObjectParameter("featured", featured) :
                new ObjectParameter("featured", typeof(bool));
    
            var topTenParameter = topTen.HasValue ?
                new ObjectParameter("topTen", topTen) :
                new ObjectParameter("topTen", typeof(bool));
    
            var sleepsParameter = sleeps.HasValue ?
                new ObjectParameter("sleeps", sleeps) :
                new ObjectParameter("sleeps", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_ListingTable", nameParameter, continentParameter, countryParameter, stateParameter, regionParameter, cityParameter, addressParameter, zipParameter, latitudeParameter, longitudeParameter, bedroomsParameter, bathroomsParameter, minStayParameter, propertyTypeParameter, locationTypeParameter, entranceParameter, timeZoneParameter, descriptionParameter, paymentStatusParameter, statusParameter, dateParameter, dateUpdateParameter, addedByParameter, roomDescriptionParameter, metaTitleParameter, metaKeywordParameter, metaDescriptionParameter, coastBeachParameter, golfParameter, specialInterestParameter, howReachThereParameter, featuredParameter, topTenParameter, sleepsParameter, id);
        }
    
        public virtual int sp_Insert_policiesTable(string paymentPolicy, string callectionPolicy, string rules, Nullable<int> listingID, ObjectParameter id)
        {
            var paymentPolicyParameter = paymentPolicy != null ?
                new ObjectParameter("paymentPolicy", paymentPolicy) :
                new ObjectParameter("paymentPolicy", typeof(string));
    
            var callectionPolicyParameter = callectionPolicy != null ?
                new ObjectParameter("callectionPolicy", callectionPolicy) :
                new ObjectParameter("callectionPolicy", typeof(string));
    
            var rulesParameter = rules != null ?
                new ObjectParameter("rules", rules) :
                new ObjectParameter("rules", typeof(string));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_policiesTable", paymentPolicyParameter, callectionPolicyParameter, rulesParameter, listingIDParameter, id);
        }
    
        public virtual int sp_Insert_ratesDataTable(string name, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<double> weekNight, Nullable<double> weekendNight, Nullable<double> weekly, Nullable<double> monthly, Nullable<double> weekNightTemp, Nullable<double> weekendNightTemp, Nullable<double> weeklyTemp, Nullable<double> monthlyTemp, Nullable<int> listingID, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var weekNightParameter = weekNight.HasValue ?
                new ObjectParameter("weekNight", weekNight) :
                new ObjectParameter("weekNight", typeof(double));
    
            var weekendNightParameter = weekendNight.HasValue ?
                new ObjectParameter("weekendNight", weekendNight) :
                new ObjectParameter("weekendNight", typeof(double));
    
            var weeklyParameter = weekly.HasValue ?
                new ObjectParameter("weekly", weekly) :
                new ObjectParameter("weekly", typeof(double));
    
            var monthlyParameter = monthly.HasValue ?
                new ObjectParameter("monthly", monthly) :
                new ObjectParameter("monthly", typeof(double));
    
            var weekNightTempParameter = weekNightTemp.HasValue ?
                new ObjectParameter("weekNightTemp", weekNightTemp) :
                new ObjectParameter("weekNightTemp", typeof(double));
    
            var weekendNightTempParameter = weekendNightTemp.HasValue ?
                new ObjectParameter("weekendNightTemp", weekendNightTemp) :
                new ObjectParameter("weekendNightTemp", typeof(double));
    
            var weeklyTempParameter = weeklyTemp.HasValue ?
                new ObjectParameter("weeklyTemp", weeklyTemp) :
                new ObjectParameter("weeklyTemp", typeof(double));
    
            var monthlyTempParameter = monthlyTemp.HasValue ?
                new ObjectParameter("monthlyTemp", monthlyTemp) :
                new ObjectParameter("monthlyTemp", typeof(double));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_ratesDataTable", nameParameter, beginDateParameter, endDateParameter, weekNightParameter, weekendNightParameter, weeklyParameter, monthlyParameter, weekNightTempParameter, weekendNightTempParameter, weeklyTempParameter, monthlyTempParameter, listingIDParameter, id);
        }
    
        public virtual int sp_Insert_ratesTable(string currency, Nullable<int> standardOccupancy, Nullable<int> maxOccupancy, Nullable<int> extraPersonRate, string checkInTime, string checkOutTime, string paymentOptions, string describeRates, Nullable<int> listingID, ObjectParameter id)
        {
            var currencyParameter = currency != null ?
                new ObjectParameter("currency", currency) :
                new ObjectParameter("currency", typeof(string));
    
            var standardOccupancyParameter = standardOccupancy.HasValue ?
                new ObjectParameter("standardOccupancy", standardOccupancy) :
                new ObjectParameter("standardOccupancy", typeof(int));
    
            var maxOccupancyParameter = maxOccupancy.HasValue ?
                new ObjectParameter("maxOccupancy", maxOccupancy) :
                new ObjectParameter("maxOccupancy", typeof(int));
    
            var extraPersonRateParameter = extraPersonRate.HasValue ?
                new ObjectParameter("extraPersonRate", extraPersonRate) :
                new ObjectParameter("extraPersonRate", typeof(int));
    
            var checkInTimeParameter = checkInTime != null ?
                new ObjectParameter("checkInTime", checkInTime) :
                new ObjectParameter("checkInTime", typeof(string));
    
            var checkOutTimeParameter = checkOutTime != null ?
                new ObjectParameter("checkOutTime", checkOutTime) :
                new ObjectParameter("checkOutTime", typeof(string));
    
            var paymentOptionsParameter = paymentOptions != null ?
                new ObjectParameter("paymentOptions", paymentOptions) :
                new ObjectParameter("paymentOptions", typeof(string));
    
            var describeRatesParameter = describeRates != null ?
                new ObjectParameter("describeRates", describeRates) :
                new ObjectParameter("describeRates", typeof(string));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_ratesTable", currencyParameter, standardOccupancyParameter, maxOccupancyParameter, extraPersonRateParameter, checkInTimeParameter, checkOutTimeParameter, paymentOptionsParameter, describeRatesParameter, listingIDParameter, id);
        }
    
        public virtual ObjectResult<sp_Search_Area_Result> sp_Search_Area(string keywords)
        {
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Search_Area_Result>("sp_Search_Area", keywordsParameter);
        }
    
        public virtual int sp_Update_AmenitiesTable(Nullable<int> id, string amenities, string amenitiesSize, string maidService, Nullable<int> listingID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var amenitiesParameter = amenities != null ?
                new ObjectParameter("amenities", amenities) :
                new ObjectParameter("amenities", typeof(string));
    
            var amenitiesSizeParameter = amenitiesSize != null ?
                new ObjectParameter("amenitiesSize", amenitiesSize) :
                new ObjectParameter("amenitiesSize", typeof(string));
    
            var maidServiceParameter = maidService != null ?
                new ObjectParameter("maidService", maidService) :
                new ObjectParameter("maidService", typeof(string));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_AmenitiesTable", idParameter, amenitiesParameter, amenitiesSizeParameter, maidServiceParameter, listingIDParameter);
        }
    
        public virtual int sp_Update_AmenityFee(Nullable<int> id, string items, string fees, string feeTypes, Nullable<int> listingID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var itemsParameter = items != null ?
                new ObjectParameter("items", items) :
                new ObjectParameter("items", typeof(string));
    
            var feesParameter = fees != null ?
                new ObjectParameter("fees", fees) :
                new ObjectParameter("fees", typeof(string));
    
            var feeTypesParameter = feeTypes != null ?
                new ObjectParameter("feeTypes", feeTypes) :
                new ObjectParameter("feeTypes", typeof(string));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_AmenityFee", idParameter, itemsParameter, feesParameter, feeTypesParameter, listingIDParameter);
        }
    
        public virtual int sp_Update_attractionsTable(Nullable<int> id, string attractions, string distances, string distanceTypes, string description, Nullable<int> listingID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var attractionsParameter = attractions != null ?
                new ObjectParameter("attractions", attractions) :
                new ObjectParameter("attractions", typeof(string));
    
            var distancesParameter = distances != null ?
                new ObjectParameter("distances", distances) :
                new ObjectParameter("distances", typeof(string));
    
            var distanceTypesParameter = distanceTypes != null ?
                new ObjectParameter("distanceTypes", distanceTypes) :
                new ObjectParameter("distanceTypes", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_attractionsTable", idParameter, attractionsParameter, distancesParameter, distanceTypesParameter, descriptionParameter, listingIDParameter);
        }
    
        public virtual int sp_Update_ListingTable(Nullable<int> id, string name, string continent, Nullable<int> country, Nullable<int> state, Nullable<int> region, Nullable<int> city, string address, string zip, string latitude, string longitude, Nullable<int> bedrooms, Nullable<decimal> bathrooms, string minStay, string propertyType, string locationType, Nullable<int> entrance, string timeZone, string description, string paymentStatus, Nullable<bool> status, Nullable<System.DateTime> date, Nullable<System.DateTime> dateUpdate, string roomDescription, string metaTitle, string metaKeyword, string metaDescription, string coastBeach, string golf, string specialInterest, string howReachThere, Nullable<bool> featured, Nullable<bool> topTen, Nullable<int> sleeps)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var continentParameter = continent != null ?
                new ObjectParameter("continent", continent) :
                new ObjectParameter("continent", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(int));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(int));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var bedroomsParameter = bedrooms.HasValue ?
                new ObjectParameter("bedrooms", bedrooms) :
                new ObjectParameter("bedrooms", typeof(int));
    
            var bathroomsParameter = bathrooms.HasValue ?
                new ObjectParameter("bathrooms", bathrooms) :
                new ObjectParameter("bathrooms", typeof(decimal));
    
            var minStayParameter = minStay != null ?
                new ObjectParameter("minStay", minStay) :
                new ObjectParameter("minStay", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("propertyType", propertyType) :
                new ObjectParameter("propertyType", typeof(string));
    
            var locationTypeParameter = locationType != null ?
                new ObjectParameter("locationType", locationType) :
                new ObjectParameter("locationType", typeof(string));
    
            var entranceParameter = entrance.HasValue ?
                new ObjectParameter("entrance", entrance) :
                new ObjectParameter("entrance", typeof(int));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("timeZone", timeZone) :
                new ObjectParameter("timeZone", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("paymentStatus", paymentStatus) :
                new ObjectParameter("paymentStatus", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var dateUpdateParameter = dateUpdate.HasValue ?
                new ObjectParameter("dateUpdate", dateUpdate) :
                new ObjectParameter("dateUpdate", typeof(System.DateTime));
    
            var roomDescriptionParameter = roomDescription != null ?
                new ObjectParameter("roomDescription", roomDescription) :
                new ObjectParameter("roomDescription", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("metaTitle", metaTitle) :
                new ObjectParameter("metaTitle", typeof(string));
    
            var metaKeywordParameter = metaKeyword != null ?
                new ObjectParameter("metaKeyword", metaKeyword) :
                new ObjectParameter("metaKeyword", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("metaDescription", metaDescription) :
                new ObjectParameter("metaDescription", typeof(string));
    
            var coastBeachParameter = coastBeach != null ?
                new ObjectParameter("coastBeach", coastBeach) :
                new ObjectParameter("coastBeach", typeof(string));
    
            var golfParameter = golf != null ?
                new ObjectParameter("golf", golf) :
                new ObjectParameter("golf", typeof(string));
    
            var specialInterestParameter = specialInterest != null ?
                new ObjectParameter("specialInterest", specialInterest) :
                new ObjectParameter("specialInterest", typeof(string));
    
            var howReachThereParameter = howReachThere != null ?
                new ObjectParameter("howReachThere", howReachThere) :
                new ObjectParameter("howReachThere", typeof(string));
    
            var featuredParameter = featured.HasValue ?
                new ObjectParameter("featured", featured) :
                new ObjectParameter("featured", typeof(bool));
    
            var topTenParameter = topTen.HasValue ?
                new ObjectParameter("topTen", topTen) :
                new ObjectParameter("topTen", typeof(bool));
    
            var sleepsParameter = sleeps.HasValue ?
                new ObjectParameter("sleeps", sleeps) :
                new ObjectParameter("sleeps", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_ListingTable", idParameter, nameParameter, continentParameter, countryParameter, stateParameter, regionParameter, cityParameter, addressParameter, zipParameter, latitudeParameter, longitudeParameter, bedroomsParameter, bathroomsParameter, minStayParameter, propertyTypeParameter, locationTypeParameter, entranceParameter, timeZoneParameter, descriptionParameter, paymentStatusParameter, statusParameter, dateParameter, dateUpdateParameter, roomDescriptionParameter, metaTitleParameter, metaKeywordParameter, metaDescriptionParameter, coastBeachParameter, golfParameter, specialInterestParameter, howReachThereParameter, featuredParameter, topTenParameter, sleepsParameter);
        }
    
        public virtual int sp_Update_policiesTable(Nullable<int> id, string paymentPolicy, string callectionPolicy, string rules, Nullable<int> listingID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var paymentPolicyParameter = paymentPolicy != null ?
                new ObjectParameter("paymentPolicy", paymentPolicy) :
                new ObjectParameter("paymentPolicy", typeof(string));
    
            var callectionPolicyParameter = callectionPolicy != null ?
                new ObjectParameter("callectionPolicy", callectionPolicy) :
                new ObjectParameter("callectionPolicy", typeof(string));
    
            var rulesParameter = rules != null ?
                new ObjectParameter("rules", rules) :
                new ObjectParameter("rules", typeof(string));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_policiesTable", idParameter, paymentPolicyParameter, callectionPolicyParameter, rulesParameter, listingIDParameter);
        }
    
        public virtual int sp_Update_ratesDataTable(Nullable<int> id, string name, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<double> weekNight, Nullable<double> weekendNight, Nullable<double> weekly, Nullable<double> monthly, Nullable<double> weekNightTemp, Nullable<double> weekendNightTemp, Nullable<double> weeklyTemp, Nullable<double> monthlyTemp, Nullable<int> listingID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var weekNightParameter = weekNight.HasValue ?
                new ObjectParameter("weekNight", weekNight) :
                new ObjectParameter("weekNight", typeof(double));
    
            var weekendNightParameter = weekendNight.HasValue ?
                new ObjectParameter("weekendNight", weekendNight) :
                new ObjectParameter("weekendNight", typeof(double));
    
            var weeklyParameter = weekly.HasValue ?
                new ObjectParameter("weekly", weekly) :
                new ObjectParameter("weekly", typeof(double));
    
            var monthlyParameter = monthly.HasValue ?
                new ObjectParameter("monthly", monthly) :
                new ObjectParameter("monthly", typeof(double));
    
            var weekNightTempParameter = weekNightTemp.HasValue ?
                new ObjectParameter("weekNightTemp", weekNightTemp) :
                new ObjectParameter("weekNightTemp", typeof(double));
    
            var weekendNightTempParameter = weekendNightTemp.HasValue ?
                new ObjectParameter("weekendNightTemp", weekendNightTemp) :
                new ObjectParameter("weekendNightTemp", typeof(double));
    
            var weeklyTempParameter = weeklyTemp.HasValue ?
                new ObjectParameter("weeklyTemp", weeklyTemp) :
                new ObjectParameter("weeklyTemp", typeof(double));
    
            var monthlyTempParameter = monthlyTemp.HasValue ?
                new ObjectParameter("monthlyTemp", monthlyTemp) :
                new ObjectParameter("monthlyTemp", typeof(double));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_ratesDataTable", idParameter, nameParameter, beginDateParameter, endDateParameter, weekNightParameter, weekendNightParameter, weeklyParameter, monthlyParameter, weekNightTempParameter, weekendNightTempParameter, weeklyTempParameter, monthlyTempParameter, listingIDParameter);
        }
    
        public virtual int sp_Update_ratesTable(Nullable<int> id, string currency, Nullable<int> standardOccupancy, Nullable<int> maxOccupancy, Nullable<int> extraPersonRate, string checkInTime, string checkOutTime, string paymentOptions, string describeRates, Nullable<int> listingID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("currency", currency) :
                new ObjectParameter("currency", typeof(string));
    
            var standardOccupancyParameter = standardOccupancy.HasValue ?
                new ObjectParameter("standardOccupancy", standardOccupancy) :
                new ObjectParameter("standardOccupancy", typeof(int));
    
            var maxOccupancyParameter = maxOccupancy.HasValue ?
                new ObjectParameter("maxOccupancy", maxOccupancy) :
                new ObjectParameter("maxOccupancy", typeof(int));
    
            var extraPersonRateParameter = extraPersonRate.HasValue ?
                new ObjectParameter("extraPersonRate", extraPersonRate) :
                new ObjectParameter("extraPersonRate", typeof(int));
    
            var checkInTimeParameter = checkInTime != null ?
                new ObjectParameter("checkInTime", checkInTime) :
                new ObjectParameter("checkInTime", typeof(string));
    
            var checkOutTimeParameter = checkOutTime != null ?
                new ObjectParameter("checkOutTime", checkOutTime) :
                new ObjectParameter("checkOutTime", typeof(string));
    
            var paymentOptionsParameter = paymentOptions != null ?
                new ObjectParameter("paymentOptions", paymentOptions) :
                new ObjectParameter("paymentOptions", typeof(string));
    
            var describeRatesParameter = describeRates != null ?
                new ObjectParameter("describeRates", describeRates) :
                new ObjectParameter("describeRates", typeof(string));
    
            var listingIDParameter = listingID.HasValue ?
                new ObjectParameter("listingID", listingID) :
                new ObjectParameter("listingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_ratesTable", idParameter, currencyParameter, standardOccupancyParameter, maxOccupancyParameter, extraPersonRateParameter, checkInTimeParameter, checkOutTimeParameter, paymentOptionsParameter, describeRatesParameter, listingIDParameter);
        }
    
        public virtual int updatePage(Nullable<int> pageid, Nullable<int> domainid, string pagename, string title, string keyword, string description)
        {
            var pageidParameter = pageid.HasValue ?
                new ObjectParameter("pageid", pageid) :
                new ObjectParameter("pageid", typeof(int));
    
            var domainidParameter = domainid.HasValue ?
                new ObjectParameter("domainid", domainid) :
                new ObjectParameter("domainid", typeof(int));
    
            var pagenameParameter = pagename != null ?
                new ObjectParameter("pagename", pagename) :
                new ObjectParameter("pagename", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePage", pageidParameter, domainidParameter, pagenameParameter, titleParameter, keywordParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usptBlogComment_Result> usptBlogComment(string uType, Nullable<long> commentID, Nullable<long> blogID, string commant, Nullable<byte> isActive, string commentOn, string commentBy, Nullable<System.DateTime> dataAdded, string pageName, string clsName, string fnName)
        {
            var uTypeParameter = uType != null ?
                new ObjectParameter("uType", uType) :
                new ObjectParameter("uType", typeof(string));
    
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(long));
    
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(long));
    
            var commantParameter = commant != null ?
                new ObjectParameter("Commant", commant) :
                new ObjectParameter("Commant", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(byte));
    
            var commentOnParameter = commentOn != null ?
                new ObjectParameter("CommentOn", commentOn) :
                new ObjectParameter("CommentOn", typeof(string));
    
            var commentByParameter = commentBy != null ?
                new ObjectParameter("CommentBy", commentBy) :
                new ObjectParameter("CommentBy", typeof(string));
    
            var dataAddedParameter = dataAdded.HasValue ?
                new ObjectParameter("DataAdded", dataAdded) :
                new ObjectParameter("DataAdded", typeof(System.DateTime));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var clsNameParameter = clsName != null ?
                new ObjectParameter("ClsName", clsName) :
                new ObjectParameter("ClsName", typeof(string));
    
            var fnNameParameter = fnName != null ?
                new ObjectParameter("FnName", fnName) :
                new ObjectParameter("FnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usptBlogComment_Result>("usptBlogComment", uTypeParameter, commentIDParameter, blogIDParameter, commantParameter, isActiveParameter, commentOnParameter, commentByParameter, dataAddedParameter, pageNameParameter, clsNameParameter, fnNameParameter);
        }
    
        public virtual ObjectResult<usptPostBlog_Result> usptPostBlog(string uType, Nullable<long> blogID, string blogTitle, string blogSDescription, string blogBody, string pageKeword, string pageDescription, Nullable<byte> isPublish, Nullable<byte> isActive, Nullable<System.DateTime> dateAdded, string pageName, string clsName, string fnName)
        {
            var uTypeParameter = uType != null ?
                new ObjectParameter("uType", uType) :
                new ObjectParameter("uType", typeof(string));
    
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(long));
    
            var blogTitleParameter = blogTitle != null ?
                new ObjectParameter("BlogTitle", blogTitle) :
                new ObjectParameter("BlogTitle", typeof(string));
    
            var blogSDescriptionParameter = blogSDescription != null ?
                new ObjectParameter("BlogSDescription", blogSDescription) :
                new ObjectParameter("BlogSDescription", typeof(string));
    
            var blogBodyParameter = blogBody != null ?
                new ObjectParameter("BlogBody", blogBody) :
                new ObjectParameter("BlogBody", typeof(string));
    
            var pageKewordParameter = pageKeword != null ?
                new ObjectParameter("PageKeword", pageKeword) :
                new ObjectParameter("PageKeword", typeof(string));
    
            var pageDescriptionParameter = pageDescription != null ?
                new ObjectParameter("PageDescription", pageDescription) :
                new ObjectParameter("PageDescription", typeof(string));
    
            var isPublishParameter = isPublish.HasValue ?
                new ObjectParameter("IsPublish", isPublish) :
                new ObjectParameter("IsPublish", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(byte));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("DateAdded", dateAdded) :
                new ObjectParameter("DateAdded", typeof(System.DateTime));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var clsNameParameter = clsName != null ?
                new ObjectParameter("ClsName", clsName) :
                new ObjectParameter("ClsName", typeof(string));
    
            var fnNameParameter = fnName != null ?
                new ObjectParameter("FnName", fnName) :
                new ObjectParameter("FnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usptPostBlog_Result>("usptPostBlog", uTypeParameter, blogIDParameter, blogTitleParameter, blogSDescriptionParameter, blogBodyParameter, pageKewordParameter, pageDescriptionParameter, isPublishParameter, isActiveParameter, dateAddedParameter, pageNameParameter, clsNameParameter, fnNameParameter);
        }
    }
}
